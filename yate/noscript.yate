/*
 * @fileOverview Common yate templates for noscript
 */

/**
 * Мост к ns.router.url
 */
external scalar ns-url(scalar)

/**
 * Мост до ns.router.generateUrl
 */
external scalar ns-generate-url(/* layout */scalar, /* params */object)

/**
 * Ключ для получения данных модели
 * @example
 * data = model('name')
 */
key model( /.models.*[ .status == 'ok' ], name() ) {
    .*[ name() != 'status' ]
}

/**
 * Ключ для получения ошибки модели
 * @example
 * error = modelError('name')
 */
key modelError( /.models.*[ .status == 'error' ], name() ) {
    .*[ name() != 'status' ]
}

// @private
match / {
    <div class="ns-root">
        apply .views.* ns-view
    </div>
}

// делает chroot для view и генерит обертку с помощью ns-build-view
// @private
match .* ns-view {
    apply document(.).tree.* ns-build-view
}

// Главная мода для каждой view
// Генерит <div class="ns-view-<viewname>"> ... </div>
// Содержимое view определяется модой ns-view-content
// @private
match .* ns-build-view {
    <div class="ns-view-{ name() }" data-key="{ /.key }">
        state = scalar(/.state)

        if state == 'placeholder' {
            @class += ' ns-view-placeholder'
            if (/.collection) {
                apply . ns-view-collection
            } else {
                apply . ns-view-desc
            }

        } else {
            @class += apply . ns-view-add-class
            apply . ns-view-add-attrs

            if state == 'loading' {
                apply . ns-view-async-content

            } else if state == 'error' {
                apply . ns-view-error-content

            } else {
                apply . ns-view-content
            }
        }
    </div>
}

// Возможность добавить к блоку view какой-либо класс
// @public
match .* ns-view-add-class {
    // по умолчанию ничего к классу не добавляем
}

match .* ns-view-add-attrs {
    // по умолчанию ничего в атрибуты не добавляем
}

// Содержимое view
// @public
match .* ns-view-content {
    if (/.collection) {
        // special node child-container for view-collection
        // so view-collection can has its own html markup
        <div class="ns-view-container-desc">
            apply . ns-view-collection
        </div>
    } else {
        apply . ns-view-desc
    }
}

match .* ns-view-desc {
    apply /.views.* ns-view
}

match .* ns-view-collection {
    apply /.views.ns-view-collection-container.* ns-view
}

// Содержимое view при async-инициализации
// @public
match .* ns-view-async-content {}

// Часть обязательных моделей не удалось получить или для них вернулась ошибка
// @public
match .* ns-view-error-content {
    // Надо все равно отрисовать дерево,
    // чтобы не нарваться на ошибку "Can't find node for <view>"
    apply . ns-view-content
}
